openapi: 3.0.0
info:
  version: 1.0.0
  title: API Template
  x-logo:
    url: >-
      https://github-readme-stats.vercel.app/api/pin/?username=kawano-020&repo=api-workspace&show_owner=true&show_icons=true
  description: |
    This API is for pesonal develepments.

    # Introduction

    ユーザーがコンテンツ(呟き)を発信し、それに対してリプライやいいねができるサービスのAPI

    Twitterの簡易版のようなイメージ

    また、ユーザーの各アクションに対してログを作成していく
  contact:
    name: MyGithub
    url: 'https://github.com/kawano-020'
servers:
  - url: 'http://localhost:28000'
paths:
  /auth/login:
    post:
      operationId: auth.login.post
      tags:
        - auth
      security: []
      summary: ログインする(JWTを得る)ためのAPI
      description: >
        ユーザーの`email`とHash処理前の`password`が正しい場合に対象のユーザーの`access`と`refresh`それぞれのJWTを返す。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: '#/components/schemas/Email'
                password:
                  $ref: '#/components/schemas/Password'
              required:
                - email
                - password
              example:
                email: example@example.com
                password: user_password
      responses:
        '200':
          description: '**Generated Tokens**'
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    $ref: '#/components/schemas/AccessToken'
                  refresh_token:
                    $ref: '#/components/schemas/RefreshToken'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/signup:
    post:
      operationId: auth.signup.post
      tags:
        - auth
      security: []
      summary: ユーザーを仮登録するためのAPI
      description: >
        リクエスト成功時、リクエストの内容を基に`users`テーブルに`status`を`tmp`、`password_hash`には以下の仕様でHash化した値を使用してレコードを作成し、


        - アルゴリズム : `bcrypt`

        - ストレッチング : 8回


        入力された`email`に対して以下のメールを送信する。


        本登録リンクのQueryStringに載せるトークン(SignupToken)はユーザーの`email`を以下の仕様でHash化した値を使用する。


        - アルゴリズム : `bcrypt`

        - ストレッチング : 8回


        その際、`signup_tokens`テーブルに発行したトークンをユーザーと紐づけて保存する。


        ```html

        仮登録を受付けました。

        以下のリンクから本登録を完了してください。


        http://localhost:23000/verify-signup?token={SignupToken}

        ```


        フロントでは、入力した`email`に送信されたメールに記載されているリンクを踏むことで本登録を完了させる。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/User'
                - type: object
                  properties:
                    password:
                      $ref: '#/components/schemas/Password'
              required:
                - first_name
                - last_name
                - email
                - password
      responses:
        '201':
          description: '**Created Temporary User**'
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      id:
                        $ref: '#/components/schemas/UUID'
                  - $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/verify-signup:
    post:
      operationId: auth.verifySignup.post
      tags:
        - auth
      security: []
      summary: ユーザーを本登録するためのAPI
      description: >
        `signup_tokens`テーブルから、リクエストボディの`token`を検索し、


        該当するレコードがあった場合に、そのレコードに紐付くユーザーの`status`を`active`に変更し、該当の`signup_token`レコードを削除する。


        レスポンスでは`access`と`refresh`それぞれのJTWを返す。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  $ref: '#/components/schemas/VerifyToken'
              required:
                - token
      responses:
        '200':
          description: '**Generated Tokens**'
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    $ref: '#/components/schemas/AccessToken'
                  refresh_token:
                    $ref: '#/components/schemas/RefreshToken'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/reset-password:
    post:
      operationId: auth.resetPassword.post
      tags:
        - auth
      summary: パスワード再設定のメールを受け取るためのAPI
      description: >
        `password_reset_tokens`テーブルに発行したトークンを、リクエストボディの`email`が一致するユーザーと紐づけて保存する。


        トークンはユーザーの`email`を以下の仕様でHash化した値を使用する。


        - アルゴリズム : `bcrypt`

        - ストレッチング : 8回


        入力された`email`に対して以下のメールを送信する。

        本登録リンクのQueryStringに載せるトークン(PasswordResetToken)


        ```html

        以下のリンクからパスワードの再設定を完了してください。


        http://localhost:23000/verify-reset-password?token={PasswordResetToken}

        ```


        フロントでは、入力した`email`に送信されたメールに記載されているリンク先の画面で、新しいパスワードを入力することで再設定を完了させる。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: '#/components/schemas/Email'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/verify-reset-password:
    post:
      operationId: auth.verifyResetPassword.post
      tags:
        - auth
      summary: パスワード再設定を完了するためのAPI
      description: >
        `password_reset_tokens`テーブルから、リクエストボディの`token`を検索し、


        該当するレコードがあった場合に、そのレコードに紐付くユーザーの`password_hash`をリクエストボディの`new_password`を以下の仕様でHash化した値に変更する。


        - アルゴリズム : `bcrypt`

        - ストレッチング : 8回


        その際、該当の`password_reset_token`レコードを削除する。


        レスポンスでは`access`と`refresh`それぞれのJTWを返す。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  $ref: '#/components/schemas/VerifyToken'
                new_password:
                  $ref: '#/components/schemas/Password'
      responses:
        '200':
          description: '**Generated Tokens**'
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    $ref: '#/components/schemas/AccessToken'
                  refresh_token:
                    $ref: '#/components/schemas/RefreshToken'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/me:
    get:
      operationId: auth.me.get
      tags:
        - auth
      summary: ログインユーザーの情報を取得するためのAPI
      responses:
        '200':
          description: '**Logged in User**'
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      id:
                        $ref: '#/components/schemas/UUID'
                  - $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      operationId: auth.me.patch
      tags:
        - auth
      summary: ログインユーザーの情報を変更するためのAPI
      description: |
        CSRF攻撃等のクラックを防ぐため、パスワードの変更に関してはリクエストボディに以下のプロパティを載せ、認証を挟むよう実装する。

        - `current_password` : 現在のパスワード
        - `new_password` : 新しいパスワード
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/User'
                - type: object
                  properties:
                    current_password:
                      $ref: '#/components/schemas/Password'
                    new_password:
                      $ref: '#/components/schemas/Password'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users:
    get:
      operationId: users.get
      summary: ユーザー一覧を取得するためのAPI
      tags:
        - user
      responses:
        '200':
          description: '**User List**'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      $ref: '#/components/schemas/UUID'
                    first_name:
                      $ref: '#/components/schemas/FirstName'
                    last_name:
                      $ref: '#/components/schemas/LastName'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/users/{user_id}/contents':
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      operationId: users.id.contents.get
      tags:
        - content
      summary: 特定のユーザーのコンテンツ一覧を取得するためのAPI
      description: |
        特定のユーザーの全てのコンテンツ一覧を返す。
      responses:
        '200':
          description: '**Content List**'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Content'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /contents:
    get:
      operationId: contents.get
      tags:
        - content
      summary: 全コンテンツの一覧を取得するためのAPI
      description: |
        `replies`テーブルに存在しない、トップレベルのコンテンツ一覧を返す。
      responses:
        '200':
          description: '**Content List**'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Content'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      operationId: contents.post
      tags:
        - content
      summary: コンテンツを新規作成するためのAPI
      description: |
        `contents`テーブルにリクエストユーザーを紐付けたレコードを作成する。

        その際、以下の内容で`content_logs`テーブルにレコードを作成する。
        - `content_id` : 作成したコンテンツのID
        - `type` : `post`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                detail:
                  $ref: '#/components/schemas/ContentDetail'
              required:
                - detail
      responses:
        '201':
          description: '**Created Content**'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/contents/{content_id}':
    parameters:
      - $ref: '#/components/parameters/ContentId'
    patch:
      operationId: contents.id.patch
      tags:
        - content
      summary: 特定のコンテンツを編集するためのAPI
      description: |
        自分のコンテンツのみ編集可能

        レコードを更新した際、以下の内容で`content_logs`テーブルにレコードを作成する。
        - `content_id` : 更新したコンテンツのID
        - `type` : `update`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                detail:
                  $ref: '#/components/schemas/ContentDetail'
              required:
                - detail
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      operationId: contents.id.delete
      tags:
        - content
      summary: 特定のコンテンツを削除するためのAPI
      description: |
        自分のコンテンツのみ削除可能
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/contents/{content_id}/replies':
    parameters:
      - $ref: '#/components/parameters/ContentId'
    get:
      operationId: contents.id.replies.get
      tags:
        - content
      summary: 特定のコンテンツの返信先・返信一覧を取得するためのAPI
      description: |
        `replies`テーブルからそれぞれ以下のように参照し、該当のコンテンツを返す。

        - `parent`
          - パラメータの`content_id`と`repliy_content_id`が一致するレコードがあれば、そのレコードの`parent_content_id`に紐づくコンテンツを取得する。無ければ`null`として返す。
        - `children`
          - パラメータの`content_id`と`parent_content_id`が一致するレコードの`reply_content_id`に紐づくコンテンツを一覧で取得する。
      responses:
        '200':
          description: '**Reply Content(s)**'
          content:
            application/json:
              schema:
                type: object
                properties:
                  parent:
                    description: 返信先のコンテンツ
                    type: object
                    properties:
                      id:
                        type: string
                        format: UUID
                        minLength: 36
                        maxLength: 36
                        example: 71a9b613-1f4e-4247-6da9-fb66a7ab2a4b
                      user:
                        type: object
                        properties:
                          id:
                            type: string
                            format: UUID
                            minLength: 36
                            maxLength: 36
                            example: 71a9b613-1f4e-4247-6da9-fb66a7ab2a4b
                          first_name:
                            type: string
                            minLength: 1
                            maxLength: 255
                            example: 田中
                          last_name:
                            type: string
                            minLength: 1
                            maxLength: 255
                            example: 太郎
                      detail:
                        type: string
                        minLength: 1
                        maxLength: 65535
                        example: >
                          恥の多い生涯を送ってきました。

                          自分には、人間の生活というものが、見当つかないのです。自分は東北の田舎に生れましたので、汽車をはじめて見たのは、よほど大きくなってからでした。
                      updated_at:
                        type: string
                        format: date-time
                      is_reply:
                        type: boolean
                        example: false
                      replies_count:
                        type: integer
                        minimum: 0
                    nullable: true
                  children:
                    description: コンテンツへの返信
                    type: array
                    items:
                      $ref: '#/components/schemas/Content'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      operationId: contents.id.replies.post
      tags:
        - content
      summary: 特定のコンテンツに返信するためのAPI
      description: |
        `contents`テーブルにリクエストユーザーを紐付けたレコードを作成する。

        その際、`replies`テーブルに以下の内容でレコードを作成する。

        - `parent_content_id` : パラメータの`content_id`
        - `reply_content_id` : 作成したコンテンツのID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                detail:
                  $ref: '#/components/schemas/ContentDetail'
              required:
                - detail
      responses:
        '201':
          description: '**Created Content**'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        access JWT for API

        認証トークンにはJWTを使用する。
        トークンの種別にはAccessとRefreshが存在し、リクエストの際にはAuthorization Headerにアクセストークンを載せる。

        各トークンのclaimには以下を持たせる。

        - `sub` : トークンの用途 ( `access` | `refresh` )

        - `exp` : トークンの有効期限 (UNIX時間)

        - `user_id` : ユーザーのID
  parameters:
    UserId:
      in: path
      name: user_id
      description: ユーザーのID
      required: true
      schema:
        $ref: '#/components/schemas/UUID'
    ContentId:
      in: path
      name: content_id
      description: コンテンツのID
      required: true
      schema:
        $ref: '#/components/schemas/UUID'
  schemas:
    UUID:
      type: string
      format: UUID
      minLength: 36
      maxLength: 36
      example: 71a9b613-1f4e-4247-6da9-fb66a7ab2a4b
    Email:
      type: string
      format: email
      minLength: 1
      maxLength: 225
    Password:
      type: string
      format: password
      description: Hash処理前のプレーンな文字列
      minLength: 1
      maxLength: 225
    AccessToken:
      type: string
      format: jwt
      description: アクセストークン
      example: >-
        eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJleGFtcGxlQGV4YW1wbGUuY29tIiwiZXhwIjoiMTIzNDU2Nzg5MCIsInR5cGUiOiJhY2Nlc3MifQ.3-8G0WXFGwu4Cd9Fl66AsYjBPJgtfO9CIZvdkoGW13U
    RefreshToken:
      type: string
      format: jwt
      description: リフレッシュトークン
      example: >-
        eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJleGFtcGxlQGV4YW1wbGUuY29tIiwiZXhwIjoiMTIzNDU5ODc2MCIsInR5cGUiOiJyZWZyZXNoIn0.69IVLPFVZK_rXBo2___QIETaQc4TXm7nx-mFjSz6sOY
    VerifyToken:
      type: string
      description: |
        以下の仕様で生成されたHash値

        - アルゴリズム : `bcrypt`
        - ストレッチング : 8回
      example: $2a$08$6LaQ6.VFF.pcG0Nktq8W2uIMZy4VA.VmLbt90kgBDF6SM1CgDTCn2
    FirstName:
      type: string
      minLength: 1
      maxLength: 255
      example: 田中
    LastName:
      type: string
      minLength: 1
      maxLength: 255
      example: 太郎
    User:
      type: object
      properties:
        first_name:
          type: string
          minLength: 1
          maxLength: 255
          example: 田中
        last_name:
          type: string
          minLength: 1
          maxLength: 255
          example: 太郎
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 225
    ContentDetail:
      type: string
      minLength: 1
      maxLength: 65535
      example: |
        恥の多い生涯を送ってきました。
        自分には、人間の生活というものが、見当つかないのです。自分は東北の田舎に生れましたので、汽車をはじめて見たのは、よほど大きくなってからでした。
    Content:
      type: object
      properties:
        id:
          type: string
          format: UUID
          minLength: 36
          maxLength: 36
          example: 71a9b613-1f4e-4247-6da9-fb66a7ab2a4b
        user:
          type: object
          properties:
            id:
              type: string
              format: UUID
              minLength: 36
              maxLength: 36
              example: 71a9b613-1f4e-4247-6da9-fb66a7ab2a4b
            first_name:
              type: string
              minLength: 1
              maxLength: 255
              example: 田中
            last_name:
              type: string
              minLength: 1
              maxLength: 255
              example: 太郎
        detail:
          type: string
          minLength: 1
          maxLength: 65535
          example: >
            恥の多い生涯を送ってきました。

            自分には、人間の生活というものが、見当つかないのです。自分は東北の田舎に生れましたので、汽車をはじめて見たのは、よほど大きくなってからでした。
        updated_at:
          type: string
          format: date-time
        is_reply:
          type: boolean
          example: false
        replies_count:
          type: integer
          minimum: 0
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      required:
        - code
        - message
  responses:
    NoContent:
      description: |
        **No Content**
    BadRequest:
      description: |
        **Bad Request**
        リクエストの内容や形式に不備があり、正しく処理することができない等
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Error Detail(s)
    Unauthorized:
      description: |
        **Unauthorized**
        認証情報がリクエストに含まれていない等
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Valid authentication credential lacks.
    Forbidden:
      description: |
        **Forbidden**
        リクエストを実行する権限がない等
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Insufficient permissions to a resource.
    NotFound:
      description: |
        **Not Found**
        パラメータに一致するリソース、その他リクエスト実行に必要なリソースが存在しない等
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: The requested resource could not be found.
    InternalServerError:
      description: |
        **Internal Server Error**
        予期しないサーバーエラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 500
            message: An unknown server error occurred internally.
security:
  - Bearer: []
tags:
  - name: auth
    description: '**認証**に関するAPI群'
  - name: user
    description: '**ユーザー**に関するAPI群'
  - name: content
    description: |
      **コンテンツ**に関するAPI群

      コンテンツは基本的に`updated_at`の降順とする
