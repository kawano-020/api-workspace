openapi: 3.0.0
info:
  version: 1.0.0
  title: API Template
  x-logo:
    url: https://github-readme-stats.vercel.app/api/pin/?username=kawano-020&repo=api-workspace&show_owner=true&show_icons=true
  description: |
    This API is for pesonal develepments.
  
    # Introduction

    ユーザーがコンテンツ(呟き)を発信し、それに対してリプライやいいねができるサービスのAPI

    Twitterの簡易版のようなイメージ

    また、ユーザーの各アクションに対してログを作成していく

servers:
  - url: 'http://localhost:28000'

paths:
  /auth/login:
    post:
      operationId: auth.login
      tags:
        - auth
      summary: ログインする(JWTを得る)ためのAPI
      description: |
        ユーザーの`email`とHash処理前の`password`が正しい場合に対象のユーザーの`access`と`refresh`それぞれのJWTを返す。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: "#/components/schemas/Email"
                password:
                  type: string
                  description: ユーザーのHash処理前の`password`
                  minLength: 1
                  maxLength: 225
              example:
                email: example@example.com
                password: user_password
      responses:
        "200":
          description: generated tokens
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tokens"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /users:
    get:
      description: |
        ユーザー一覧を取得するためのAPI
      operationId: users
      # TODO: 認証不要にする
      tags:
        - user
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        access JWT for API

        認証トークンにはJWTを使用する。
        トークンの種別にはAccessとRefreshが存在し、リクエストの際にはAuthorization Headerにアクセストークンを載せる。
  
        各トークンのclaimには以下を持たせる。

        - `sub`: ユーザーの`email`

        - `exp`: トークンの有効期限 (UNIX時間)

        - `type`: トークンの用途 (`access` | `refresh`)
  schemas:
    UUID:
      type: "string"
      example: "71a9b613-1f4e-4247-6da9-fb66a7ab2a4b"
    Email:
      type: "string"
      format: email
      minLength: 1
      maxLength: 225
      example: example@example.com
    AccessToken:
      type: string
      description: アクセストークン
      example: "\
        eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.\
        eyJzdWIiOiJleGFtcGxlQGV4YW1wbGUuY29tIiwiZXhwIjoiMTIzNDU2Nzg5MCIsInR5cGUiOiJhY2Nlc3MifQ.\
        3-8G0WXFGwu4Cd9Fl66AsYjBPJgtfO9CIZvdkoGW13U"
    RefreshToken:
      type: string
      description: リフレッシュトークン
      example: "\
        eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.\
        eyJzdWIiOiJleGFtcGxlQGV4YW1wbGUuY29tIiwiZXhwIjoiMTIzNDU5ODc2MCIsInR5cGUiOiJyZWZyZXNoIn0.\
        69IVLPFVZK_rXBo2___QIETaQc4TXm7nx-mFjSz6sOY"
    Tokens:
      type: object
      properties:
        access:
          $ref: "#/components/schemas/AccessToken"
        refresh:
          $ref: "#/components/schemas/RefreshToken"
    User:
      type: "object"
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        first_name:
          type: "string"
          example: "田中"
        last_name:
          type: "string"
          example: "太郎"
        email:
          $ref: "#/components/schemas/Email"
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  responses:
    BadRequest:
      description: bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 400
            message: Error Detail(s)
    Unauthorized:
      description: unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 401
            message: Valid authentication credential lacks.
    Forbidden:
      description: forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 403
            message: Insufficient permissions to a resource.
    NotFound:
      description: not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 404
            message: The requested resource could not be found.
    InternalServerError:
      description: internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 500
            message: An unknown server error occurred internally.


security:
  - Bearer: []

tags:
  - name: auth
    description: "**認証**に関するAPI群"
  - name: user
    description: "**ユーザー**に関するAPI群"